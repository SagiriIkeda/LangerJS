class LANGUAJE5{constructor({functions=!0,markdown=!0,autosave=!1}={}){let self=this;this.stor=!1,this.name=this.constructor.name,this.color="color:#FFC107",this.route=void 0,this.allow={functions:functions,markdown:markdown,autosave:autosave},this.config={CACHE:{},lang:""},this.functions={mi(a){return`<i class="material-icon">${a}</i>`},lang(a){let b=self.config.CACHE[self.config.lang][a];return"this"==a&&(b=self.config.lang),b??"(undefined)"},mat(operation){let valid=operation.match(/(\d|\s|[+*/-])+/gim);return null==valid?"invalid operation.":eval(valid[0])},var(variable){let result,Var=variable.match(/\w+((.\w+\]?)*)/gim)[0];return null!=Var&&null==Var.slice(0,1).match(/[0-9]/gim)&&(result=eval(Var)),result}},localStorage.getItem(`${this.name}`)!=null&&!0==this.allow.autosave&&(this.config.lang=JSON.parse(localStorage.getItem(`${this.name}`)))}async get(a){let b=this,c=!1;if(null==this.route)return console.error(`${this.name} Error: \n you need to set a path to get the json files \n use LANGUAJE.setRoute()`),!1;if(null==b.config.CACHE[a]){let d=Date.now();await fetch(`${this.route}${a}.json`).then(a=>a.json()).then(e=>{b.config.CACHE[a]=e,b.config.lang=a,localStorage.setItem(`${this.name}`,JSON.stringify(b.config.lang));let f=Date.now();console.log(`%c${this.name} Debug:\nfiles were obtained in ${f-d}ms`,this.color),c=b.config.CACHE[a]}).catch(()=>{console.error(`${this.name} Error: \nan error occurred, could not get the json files`),c=!1})}else b.config.lang=a,localStorage.setItem(`${this.name}`,JSON.stringify(b.config.lang)),console.log(`%c${this.name} Debug:\nContent loaded from local cache.`,this.color),c=b.config.CACHE[a];return c}motor(a){let b=a;return b=b.replace(/(\w+)\((.*?)\)/gim,(a,b,c)=>this.functions[b]?this.functions[b](c):a),b}markdown(a){if(!0==this.allow.markdown){let b=(a,b)=>`<${a}>${b}</${a}>`;a=a.replace(/(__)([^_]+)(__)/gims,(a,c,d)=>b("strong",d)),a=a.replace(/(_)([^_]+)(_)/gims,(a,c,d)=>b("em",d)),a=a.replace(/(\*\*)([^*]+)(\*\*)/gims,(a,c,d)=>b("strong",d)),a=a.replace(/(\*)([^*]+)(\*)/gims,(a,c,d)=>b("em",d)),a=a.replace(/(~~)([^~]+)(~~)/gims,(a,c,d)=>b("del",d))}return a}async set(a){if(null==a||null==a||!1==["string","object"].includes(typeof a))return console.error(`${this.name} Error:\n LANGUAJE.set() can only receive a string or an object as a parameter.`),!1;!0==this.allow.autosave&&!1==this.stor&&(this.stor=!0,""!=this.config.lang&&(a=this.config.lang));let b="object"==typeof a?a:await this.get(a),c=!1;!1!=b&&setTimeout(()=>{document.querySelectorAll("lang").forEach(d=>{if(null!=d.lenguaje&&d.lenguaje==a)return!1==c&&(console.log(`%c${this.name} Debug:\n Same language only new elements will be updated`,this.color),c=!0),!1;let e=d.innerHTML;d.target==null&&(d.target=e),d.lenguaje=a;let f=b[d.target]??"(undefined)";d.innerHTML=this.markdown(f?!0==this.allow.functions&&d.getAttribute("noFunctions")==null?this.motor(f):f:"")})},0)}Update(){this.set(this.config.lang)}setFunction(...a){a.forEach(a=>{this.functions[a.name]=a})}setRoute(a){"string"==typeof a?this.route=a:console.error(`${this.name} Error:\n LANGUAJE.setRout() can only receive a string as a parameter.`)}}